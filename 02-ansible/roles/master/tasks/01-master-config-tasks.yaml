---

- name: abrir puerto 6443/tcp (Kubernetes API Server)
  firewalld:
    port: 6443/tcp
    permanent: true
    state: enabled

- name: abrir puerto 2379-2380/tcp (etcd server client API)
  firewalld:
    port: 2379-2380/tcp
    permanent: true
    state: enabled

- name: abrir puerto 10250/tcp (Kubelet API)
  firewalld:
    port: 10250/tcp
    permanent: true
    state: enabled

- name: abrir puerto 10251/tcp (kube-scheduler)
  firewalld:
    port: 10251/tcp
    permanent: true
    state: enabled

- name: abrir puerto 10252/tcp (kube-controller-manager)
  firewalld:
    port: 10252/tcp
    permanent: true
    state: enabled

- name: abrir puerto 10255/tcp (Statistics)
  firewalld:
    port: 10255/tcp
    permanent: true
    state: enabled

- name: reiniciar firewall
  command: firewall-cmd --reload

- name: configurar kubeadm (descarga de imágenes)
  command: kubeadm config images pull

- name: abrir regla para permitir acceso desde Worker01 al master
  firewalld:
    rich_rule: rule family=ipv4 source address={{ ip_worker01 }}/32 accept
    permanent: true
    state: enabled

- name: abrir regla para permitir acceso desde Worker02 al master
  firewalld:
    rich_rule: rule family=ipv4 source address={{ ip_worker02 }}/32 accept
    permanent: true
    state: enabled

- name: reiniciar firewall
  command: firewall-cmd --reload

- name: abrir regla para permitir acceso de los contenedores a localhost
  firewalld:
    rich_rule: rule family=ipv4 source address=172.17.0.0/16 accept
    zone: public
    permanent: true
    state: enabled

- name: reiniciar firewall
  command: firewall-cmd --reload

- name: se instala el plugin CNI de kubernetes y definimos la red de los PODs
  command: kubeadm init --pod-network-cidr 192.169.0.0/16 --apiserver-advertise-address {{ ip_master }}
  register: kubeadm_init
  become: true

- name: autorizar al usuario root a acceder al cluster (crear directorio /root/.kube)
  command: mkdir -p /root/.kube
  become: true

- name: autorizar al usuario root a acceder al cluster (copiar fichero /etc/kubernetes/admin.conf a /root/.kube/config)
  command: cp /etc/kubernetes/admin.conf /root/.kube/config
  become: true

- name: autorizar al usuario root a acceder al cluster (cambiar el propietario del fichero /root/.kube/config)
  file: 
    path: /root/.kube/config
    owner: root
    group: root
  become: true

- name: se instala el operador de Tigera
  command: kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml
  become: true

- name: se descarga el fichero de definición para la instalación de Calico
  get_url: 
    url: https://docs.projectcalico.org/manifests/custom-resources.yaml
    dest: /root/custom-resources.yaml
  become: true

- name: cambiamos el cidr para que coincida con el de nuestra red de PODs
  ansible.builtin.lineinfile:
    path: /root/custom-resources.yaml
    regexp: '^(.*)cidr(.*)$'
    line: '      cidr: 192.169.0.0/16'
    backrefs: yes

- name: se instala Calico
  command: kubectl apply -f /root/custom-resources.yaml
  become: true